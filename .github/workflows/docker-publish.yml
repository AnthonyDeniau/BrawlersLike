name: Docker

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - release_group_a

    # Publish `v1.2.3` tags as releases.
    tags:
      - v*

  # Run tests for any PRs.
  pull_request:

env:
  # TODO: Change variable to your image's name.
  IMAGE_NAME: brawlerslike_backend

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          # if [ -f docker-compose.test.yml ]; then
          #   docker-compose --file docker-compose.test.yml build backend
          #   docker-compose --file docker-compose.test.yml run backend
          # else
          #   docker build backend --file Dockerfile
          # fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build backend --file ./backend/Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.PACKAGE_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          # IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME

          # # Change all uppercase to lowercase
          # IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # # Strip git ref prefix from version
          # VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # # Strip "v" prefix from tag name
          # [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # # Use Docker `latest` tag convention
          # [ "$VERSION" == "master" ] && VERSION=latest

          # echo IMAGE_ID=$IMAGE_ID
          # echo VERSION=$VERSION

          # docker tag $IMAGE_NAME $IMAGE_ID:$VERSION
          # docker push $IMAGE_ID:$VERSION
  deploy:
    # Ensure test job passes before pushing image.
    needs: push

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build image
        run: docker build backend --file ./backend/Dockerfile --tag $IMAGE_NAME

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.PACKAGE_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GitHub Container Registry
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/$IMAGE_NAME
          sudo apt-get install sshpass
          sshpass -p "${{ secrets.OVH_1_PASSWORD }}" ssh -o "StrictHostKeyChecking no" "${{ secrets.OVH_1_USER }}"@"${{ secrets.OVH_1_IP }}" 'ls -la /tmp'
          sshpass -p "${{ secrets.OVH_1_PASSWORD }}" scp -o "StrictHostKeyChecking no" ./envprod "${{ secrets.OVH_1_USER }}"@"${{ secrets.OVH_1_IP }}":/tmp
          sshpass -p "${{ secrets.OVH_1_PASSWORD }}" scp -o "StrictHostKeyChecking no" ./docker-compose.prod.yml "${{ secrets.OVH_1_USER }}"@"${{ secrets.OVH_1_IP }}":/tmp
          sshpass -p "${{ secrets.OVH_1_PASSWORD }}" scp -o "StrictHostKeyChecking no" -r ./docker "${{ secrets.OVH_1_USER }}"@"${{ secrets.OVH_1_IP }}":/tmp
          sshpass -p "${{ secrets.OVH_1_PASSWORD }}" ssh -o "StrictHostKeyChecking no" "${{ secrets.OVH_1_USER }}"@"${{ secrets.OVH_1_IP }}" 'docker-compose --file /tmp/docker-compose.prod.yml up'
