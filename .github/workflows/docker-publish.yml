name: docker_publish_group_2

on:
  push:
    # Publish `master` as Docker `latest` image.
    branches:
      - release_group_b

env:
  # TODO: Change variable to your image's name.
  IMAGE_BACKEND_NAME: brawlerslike-backend
  IMAGE_NGINX_NAME: brawlerslike-nginx
  SSHPASS: ${{ secrets.OVH_2_PASSWORD }}

jobs:
  # Run tests.
  # See also https://docs.docker.com/docker-hub/builds/automated-testing/
  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - name: Run tests
        run: |
          if [ -f docker-compose.test.yml ]; then
            docker-compose --file docker-compose.test.yml build
            docker-compose --file docker-compose.test.yml run backend
            docker-compose --file docker-compose.test.yml run nginx
          fi

  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure test job passes before pushing image.
    needs: test

    runs-on: ubuntu-latest
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - name: Build backend image
        run: docker build backend --tag $IMAGE_BACKEND_NAME

      - name: Build nginx image
        run: docker build docker/nginx --tag $IMAGE_NGINX_NAME

      - name: Log into GitHub Container Registry
      # TODO: Create a PAT with `read:packages` and `write:packages` scopes and save it as an Actions secret `CR_PAT`
        run: echo "${{ secrets.PACKAGE_PAT }}" | docker login https://docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push images to GitHub Container Registry
        run: |
          IMAGE_BACKEND_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_BACKEND_NAME
          IMAGE_NGINX_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NGINX_NAME

          # Change all uppercase to lowercase
          IMAGE_BACKEND_ID=$(echo $IMAGE_BACKEND_ID | tr '[A-Z]' '[a-z]')
          IMAGE_NGINX_ID=$(echo $IMAGE_NGINX_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Strip "v" prefix from tag name
          [[ "${{ github.ref }}" == "refs/tags/"* ]] && VERSION=$(echo $VERSION | sed -e 's/^v//')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_BACKEND_ID=$IMAGE_BACKEND_ID
          echo IMAGE_NGINX_ID=$IMAGE_NGINX_ID
          echo VERSION=$VERSION

          docker tag $IMAGE_BACKEND_NAME $IMAGE_BACKEND_ID:$VERSION
          docker push $IMAGE_BACKEND_ID:$VERSION

          docker tag $IMAGE_NGINX_NAME $IMAGE_NGINX_ID:$VERSION
          docker push $IMAGE_NGINX_ID:$VERSION

  deploy:
    needs: push
    runs-on: ubuntu-latest
    steps:
      - name: Install packages
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.OVH_2_USER }}@${{ secrets.OVH_2_IP }} 'sudo dnf install git -y'

      - name: Clone repo
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.OVH_2_USER }}@${{ secrets.OVH_2_IP }} 'rm -rf /tmp/BrawlersLike && git clone --branch release_group_b https://github.com/AnthonyDeniau/BrawlersLike.git /tmp/BrawlersLike'
      
      - name: Docker login
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.OVH_2_USER }}@${{ secrets.OVH_2_IP }} 'echo "${{ secrets.PACKAGE_PAT }}" | docker login https://ghcr.io -u ${{ github.actor }} --password-stdin'

      - name: Docker compose pull && up
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.OVH_2_USER }}@${{ secrets.OVH_2_IP }} 'cd /tmp/BrawlersLike && docker-compose pull && docker-compose up -d'
          echo "Deployed !"
      - name: Clean
        run: |
          sshpass -e ssh -o StrictHostKeyChecking=no ${{ secrets.OVH_2_USER }}@${{ secrets.OVH_2_IP }} 'rm -rf /tmp/BrawlersLike'